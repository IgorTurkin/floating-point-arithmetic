#include <bits/stdc++.h>

using namespace std;


void print(float f) {
    std::cout << std::bitset<32>(*reinterpret_cast<uint32_t*>(&f)) << '\n';
}
#pragma omp simd -O3 -march=native -fopenmp
float pairwise_sum_simd(float* x, int n){

    if(n == 1) return x[0];
    for (int i = 0; i < n / 2; i++){
        x[i]+= x[i + (n + 1) / 2];
    }
    return pairwise_sum_simd(x, (n + 1) / 2);

};

float justsum(const float* x, int n){
    float ans = 0;
    for(int i = 0; i < n; i++){
        ans += x[i];
    }
    return ans;
};

int main()
{
    int sum = 239, k = 1443, n = k * sum;

    float a[n];

    for (int i = 0; i < n; i++){
        a[i] = 1.f / k;
    }

    double start = clock();




    for (int i = 0; i < 1000; i++){
        float ans = justsum(a, n);
    }
    cout << "head-on:  " << justsum(a, n)<< endl;
    printf("just time: %.4lf\n", (clock() - start) / CLOCKS_PER_SEC);

    start = clock();
    float res;
    double stnotime, notime;

    for (int i = 0; i < 1000; i++){
        res = pairwise_sum_simd(a, n);
        double stnotime = clock();
        for (int j = 0; j < n; j++)
        {
            a[j] = 1.f / k;
        }
        notime +=  clock() - stnotime  ;
    }
    cout << "pairwise:  " << res << endl;

    printf("pairwise time: %.4lf\n", (clock() - start - notime) / CLOCKS_PER_SEC);



    cout << "real:  " << sum << endl;
    return 0;
}
